# -*- coding: utf-8 -*-
"""ML302_PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GKq3hNiDmxwfGI-2yLVzeUOfKK33Dg-b

### Principal Componenet Analysis (PCA)###
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_wine
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

data = load_wine()
df = pd.DataFrame(data.data, columns=data.feature_names)
df.head()

# @title alcohol

from matplotlib import pyplot as plt
df['alcohol'].plot(kind='line', figsize=(8, 4), title='Im on that good kush and alcohol')
plt.gca().spines[['top', 'right']].set_visible(False)

len(df.columns)

scaler = StandardScaler()

data_scaled = scaler.fit_transform(df)
df_scaled = pd.DataFrame(data_scaled, columns=df.columns)
df_scaled.head()

#Apply PCA
pca_ = PCA(n_components=len(data.feature_names))
pca_df = pca_.fit(df_scaled)

#Compute explained varaince ratio
explained_variance_ratio = pca_.explained_variance_ratio_
explained_variance_ratio

cumulative_variance = np.cumsum(explained_variance_ratio)
print(f"Cumulative variance: {cumulative_variance}")

#Find the optimal number of components (elbow method)

optimal_k = np.argmax(cumulative_variance >= 0.95) + 1 #first index where 95% of the varaince is explainedx
print(f"Optimal number of components: {optimal_k}")

#cumulative variance plot
fig, axes = plt.subplots(1,2, figsize=(18,9))
axes[0].plot(range(1, len(cumulative_variance) + 1), cumulative_variance, marker='o', linestyle='-')
axes[0].set_xlabel('Number of Principal Components')
axes[0].set_ylabel('Cumulative Explained Variance')
axes[0].set_title('Cumulative vs Number plot')
axes[0].grid(True)

#scree plot
axes[1].plot(range(1, len(explained_variance_ratio) + 1), explained_variance_ratio, marker='o', linestyle='-',
             label ='Explained varaince per components')
axes[1].set_xlabel('Number of Principal Components')
axes[1].set_ylabel('Explained Variance Ratio')
axes[1].set_title('Scree plot')
axes[1].grid(True)

plt.show